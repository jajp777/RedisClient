-- for creating questions

proc SaveQuestionData($questionId, questionData[], $userVotes)
	redis.call('HMSET', questionId, unpack(questionData))
	redis.call('ZADD', userVotes, 0, questionId)
	return 'OK'
endproc

proc IndexQuestion($questionId, $questionsByTimeId, $questionsByScoreId, initialScore, $questionCounterId)
	redis.call('ZADD', questionsByTimeId, initialScore, questionId)
    redis.call('ZADD', questionsByScoreId, initialScore, questionId)
	redis.call('INCR', questionCounterId)
	return 'OK'
endproc

-- http://oldblog.antirez.com/post/autocomplete-with-redis.html
proc SaveQuestionTags($questionTagsId, $tagsAutocompleteId, tags[])
	redis.call('SADD', questionTagsId, unpack(tags))

	for i=1, table.getn(tags), 1 
	do 
		local tag = tags[i]
		local itag = '' 
		for j = 1, #tag do
			local c = tag:sub(j,j)
			itag = itag .. c
			redis.call('ZADD', tagsAutocompleteId, 0, itag)
		end
		redis.call('ZADD', tagsAutocompleteId, 0, tag .. '*')
	end

	return 'OK'
endproc

proc NotifyTags(tagsId[])
	for i=1, table.getn(tagsId), 1 
	do 
		redis.call('PUBLISH', tagsId[i], 'ADDED')
	end
	return 'OK'
endproc

proc RegisterQuestionTagsByScore($questionId, $tagsId[], score)
	for i=1, table.getn(tagsId), 1 
	do 
	   redis.call('ZINCRBY', tagsId[i], score, questionId) 
	end
	return 'OK'
endproc

proc RegisterQuestionTagsByDate($questionId, $tagsId[], score)
	for i=1, table.getn(tagsId), 1 
	do 
	   redis.call('ZADD', tagsId[i], score, questionId) 
	end
	return 'OK'
endproc

proc IndexQuestionTags(tags[], $tagsByScore, scoreToAdd, $tagsByDate, dateScore, $tagCounting)
	for i=1, table.getn(tags), 1 
	do 
	   redis.call('ZINCRBY', tagsByScore, scoreToAdd, tags[i]) 
	   redis.call('ZADD', tagsByDate, dateScore, tags[i])
	   redis.call('ZINCRBY', tagCounting, 1, tags[i]) 
	end
	return 'OK'
endproc