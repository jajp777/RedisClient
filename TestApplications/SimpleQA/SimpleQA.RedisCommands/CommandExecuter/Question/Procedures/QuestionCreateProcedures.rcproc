-- Generates an unique question ID
proc CreateQuestionId($hashtag)
	return redis.call('INCR', hashtag .. ':ids')
endproc

-- Save question data using {question} hashtag
proc SaveQuestion($hashtag, questionId, userId, questionData[], tags[])

	local qkey = hashtag .. ':post:' .. questionId
	local qtkey = hashtag .. ':tags:' .. questionId
	local qvoteskey = hashtag .. ':votes:' .. questionId

	redis.call('HMSET', qkey, unpack(questionData))
	redis.call('SADD', qtkey, unpack(tags))
	redis.call('ZADD', qvoteskey, 0, userId)

	return redis.status_reply('OK') 

endproc

-- Index the question id in the global zsets
proc IndexQuestion($hashtag, questionId, initialScore)

	local qbydate = hashtag .. ':date'
	local qbyscore= hashtag .. ':score'
	local qcounter = hashtag .. ':counter'

	redis.call('ZADD', qbydate, initialScore, questionId)
    redis.call('ZADD', qbyscore, initialScore, questionId)
	redis.call('INCR', qcounter)

	return redis.status_reply('OK') 

endproc

-- Index the tags in the popularity ranks
proc IndexTags($hashtag, questionId, tags[], score, dateScore)

	local alltagbydate = hashtag .. ':date'
	local alltagbyscore= hashtag .. ':score'
	local alltagcount  = hashtag .. ':count'

	local function indexTag(tag)
		local tbydate = hashtag .. ':date:' .. tag
		local tbyscore = hashtag .. ':score:' .. tag

		redis.call('ZADD', tbydate, dateScore, questionId)
		redis.call('ZINCRBY', tbyscore, score, questionId) 

		redis.call('ZADD', alltagbydate, dateScore, tag)
		redis.call('ZINCRBY', alltagbyscore, score, tag) 
		
		redis.call('ZINCRBY', alltagcount, 1, tag) 

		redis.call('PUBLISH', tag, 'ADDED')
	end

	for i=1, table.getn(tags), 1 
	do 
	   indexTag(tags[i]) 
	end

	return redis.status_reply('OK') 

endproc

-- http://oldblog.antirez.com/post/autocomplete-with-redis.html
proc IndexAutoCompleteTags($hashtag, tags[])
	
	local tagsAutocompleteId = hashtag .. ':autocomplete'

	for i=1, table.getn(tags), 1 
	do 
		local tag = tags[i]
		local itag = '' 
		for j = 1, #tag do
			local c = tag:sub(j,j)
			itag = itag .. c
			redis.call('ZADD', tagsAutocompleteId, 0, itag)
		end
		redis.call('ZADD', tagsAutocompleteId, 0, tag .. '*')
	end

	return redis.status_reply('OK') 
endproc